import React, { useState } from 'react';
    import { motion, AnimatePresence } from 'framer-motion';
    import { Button } from '@/components/ui/button';
    import { Input } from '@/components/ui/input';
    import { Label } from '@/components/ui/label';
    import { Textarea } from '@/components/ui/textarea';
    import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
    import { ChevronDown, HelpCircle, Send } from 'lucide-react';
    import { useToast } from '@/components/ui/use-toast';
    import { supabase } from '@/lib/supabaseClient';

    const faqs = [
      {
        question: 'How do I upload an image?',
        answer: 'Navigate to the "Upload Image" page. You can either drag and drop your image file into the designated area or click to select a file from your device. Supported formats are JPG, PNG, GIF, and WEBP, with a maximum size of 5MB.',
      },
      {
        question: 'How long are the short URLs valid?',
        answer: 'Short URLs generated by this service redirect to images stored on Supabase and are valid as long as the image data exists in our Supabase storage and database.',
      },
      {
        question: 'Is there a limit to how many images I can upload?',
        answer: 'While this demo is generous, a production service would have defined storage and upload limits per user. Currently, it depends on the configured Supabase project limits.',
      },
      {
        question: 'What happens to my uploaded images?',
        answer: 'Your images are uploaded to Supabase Storage, and metadata (like filename and short code) is stored in a Supabase database. We prioritize your data\'s security.',
      },
      {
        question: 'How secure is this service?',
        answer: 'We leverage Supabase for backend services, which provides robust security features. All connections are over HTTPS. We continually aim to follow security best practices.',
      },
      {
        question: 'How do I receive messages sent through the contact forms?',
        answer: 'Messages submitted via the contact forms are stored in the "contact_messages" table in your Supabase database. Additionally, they are forwarded to the email address configured in the Supabase Edge Function (richvybs92@gmail.com).',
      }
    ];

    const SupportPage = () => {
      const [openFaq, setOpenFaq] = useState(null);
      const [formData, setFormData] = useState({ name: '', email: '', subject: '', message: '' });
      const [isSubmitting, setIsSubmitting] = useState(false);
      const { toast } = useToast();

      const toggleFaq = (index) => {
        setOpenFaq(openFaq === index ? null : index);
      };

      const handleInputChange = (e) => {
        const { id, value } = e.target;
        setFormData(prev => ({ ...prev, [id]: value }));
      };

      const handleSubmit = async (e) => {
        e.preventDefault();
        setIsSubmitting(true);
        
        try {
          const { error: dbError } = await supabase
            .from('contact_messages')
            .insert([{ ...formData, page_source: 'Support Page' }]);

          if (dbError) throw dbError;

          const { data: functionData, error: functionError } = await supabase.functions.invoke('send-contact-email', {
            body: JSON.stringify({
              ...formData,
              formType: 'Support Inquiry'
            }),
          });

          if (functionError) throw functionError;
          
          if (functionData && functionData.error) {
             throw new Error(functionData.message || 'Edge function returned an error.');
          }


          toast({
            title: "Message Sent!",
            description: "Thank you for your inquiry. We've received your message and a copy has been sent to support.",
          });
          setFormData({ name: '', email: '', subject: '', message: '' });
        } catch (error) {
          console.error('Error submitting support message:', error);
          toast({
            title: "Error",
            description: `Could not send your message. ${error.message || 'Please try again.'}`,
            variant: "destructive",
          });
        } finally {
          setIsSubmitting(false);
        }
      };

      return (
        <motion.div 
          className="container mx-auto px-4 py-8 space-y-12"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <section>
            <h1 className="text-4xl font-bold mb-8 text-center gradient-text">Support Center</h1>
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center text-2xl">
                  <HelpCircle className="mr-3 h-8 w-8 text-brand-blue" />
                  Frequently Asked Questions
                </CardTitle>
                <CardDescription>Find answers to common questions about our service.</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {faqs.map((faq, index) => (
                  <div key={index} className="border border-slate-700 rounded-lg overflow-hidden">
                    <button
                      onClick={() => toggleFaq(index)}
                      className="flex justify-between items-center w-full p-4 text-left bg-slate-800 hover:bg-slate-700/50 transition-colors"
                    >
                      <span className="font-medium text-gray-100">{faq.question}</span>
                      <ChevronDown
                        className={`h-5 w-5 text-gray-400 transition-transform duration-300 ${
                          openFaq === index ? 'transform rotate-180' : ''
                        }`}
                      />
                    </button>
                    <AnimatePresence>
                      {openFaq === index && (
                        <motion.div
                          initial={{ height: 0, opacity: 0 }}
                          animate={{ height: 'auto', opacity: 1 }}
                          exit={{ height: 0, opacity: 0 }}
                          transition={{ duration: 0.3, ease: 'easeInOut' }}
                          className="overflow-hidden"
                        >
                          <div className="p-4 bg-slate-800/50 text-gray-300 text-sm">
                            {faq.answer}
                          </div>
                        </motion.div>
                      )}
                    </AnimatePresence>
                  </div>
                ))}
              </CardContent>
            </Card>
          </section>

          <section>
            <Card>
              <CardHeader>
                <CardTitle className="text-2xl">Contact Support</CardTitle>
                <CardDescription>Can't find an answer? Fill out the form below to get in touch with our support team.</CardDescription>
              </CardHeader>
              <CardContent>
                <form onSubmit={handleSubmit} className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="space-y-2">
                      <Label htmlFor="name">Full Name</Label>
                      <Input id="name" placeholder="John Doe" value={formData.name} onChange={handleInputChange} required />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="email">Email Address</Label>
                      <Input id="email" type="email" placeholder="you@example.com" value={formData.email} onChange={handleInputChange} required />
                    </div>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="subject">Subject</Label>
                    <Input id="subject" placeholder="e.g., Issue with URL generation" value={formData.subject} onChange={handleInputChange} required />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="message">Message</Label>
                    <Textarea id="message" placeholder="Describe your issue or question in detail..." rows={5} value={formData.message} onChange={handleInputChange} required />
                  </div>
                  <div>
                    <Button type="submit" className="w-full md:w-auto bg-brand-orange hover:bg-brand-orange/90 text-white" disabled={isSubmitting}>
                      {isSubmitting ? (
                        <>
                          <motion.div className="mr-2" animate={{ rotate: 360 }} transition={{ duration: 1, repeat: Infinity, ease: "linear" }}>
                            <Send className="h-4 w-4" />
                          </motion.div>
                          Sending...
                        </>
                      ) : (
                        <>
                          <Send className="mr-2 h-4 w-4" /> Send Message
                        </>
                      )}
                    </Button>
                  </div>
                </form>
              </CardContent>
            </Card>
          </section>
        </motion.div>
      );
    };
    
    export default SupportPage;